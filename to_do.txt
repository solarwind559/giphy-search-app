Technical
- Primary platforms - iOS & Android; // Different api keys for ios and android.... and implemented CupertinoApp for ios and MaterialApp for android.
+ Auto search - requests to retrieve Gif information from the service are made automatically with a small delay after user stops typing;
+ Pagination - loading more results when scrolling;
+ Vertical & horizontal orientation support; // OrientationBuilder
+ Error handling;
- Unit tests - as much as you see fit;

UI
+ Responsive & matching platform guidelines;
+ At least 2 views sourced by data from Giphy; // "trending" view and the "search" TabBar view 
+ Results are displayed in a grid;
+ Clicking on a grid item should navigate to a detailed Gif view. // GifDetailView widget
+ Loading indicators; // CircularProgressIndicator, in the center of app screen,  FadeInImage widget... 
(The best time to catch the loading indicator is when the app is failing to fetch gifs,
if there is no internet access)
+ Error display; // SnackBar messages widget

Bonus points:
- Using state management approaches or libraries such as BLoC (flutter_bloc), Riverpod or others;
? Using an understandable architecture pattern;
? Page navigation is separate from page widget code (a Coordinator pattern or similar);
? Network availability handling;


